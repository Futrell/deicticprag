

var utterancePrior = function() {
  var utterances = ['here', 'there'];
  var i = randomInteger(utterances.length);
  return utterances[i];
}


var make_listener = function(speaker) {
  var listener = function(utterance) {
    return Infer({method: 'rejection', samples: 10000}, function() {
      var world = worldPrior();
      var S = speaker(world);
      factor(S.score(utterance));
      return world;
    });
  };
  return listener;
};


var worldPrior = function() {
  var location = exponential({a: 1});  // 3 people.. 0-3 can be nice.
  return location;
};

var meaning = function(utt, world, theta) {
  return (utt == 'here' ? world <= theta :
          utt == 'there' ? world > theta :
          true);
};

var make_literal_listener = function(theta) {
  var literalListener = cache(function(utterance) {
    return Infer({method: 'MCMC', samples: 100000}, function() {
      var world = worldPrior();
      var m = meaning(utterance, world, theta);
      factor(m ? 0 : -Infinity);
      return world;
    });
  });
  return literalListener;
}


var make_speaker = function(listener) {
  var speaker = cache(function(world) {
    return Infer({method: 'enumerate'}, function() {
      var utterance = utterancePrior();
      var L = listener(utterance);
      factor(L.score(world));
      return utterance;
    });
  });
  return speaker;
};

// RSA: p_S(u | w) \propto \exp{ \alpha \ln p_L(w | u) + \ln p_0(u))  }


var theta = 1;
var L0 = make_literal_listener(theta);
var S1 = make_speaker(L0);
//var L1 = make_listener(S1);
//var S2 = make_speaker(L1)
//var L2 = make_listener(S2);

//viz.auto(L0("there"));
var world = .5;
var utterance = "here";
var L = L0(utterance);
L0("here").score(.5)